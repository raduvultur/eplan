{"filter":false,"title":"angular-knob.js","tooltip":"/www/js/angular-knob.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":29}},"text":"angular.module('ui.knob', [])"},{"action":"insertText","range":{"start":{"row":0,"column":29},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":63,"column":0}},"lines":["","    .directive('knob', function () {","        return {","            restrict: 'EACM',","            template: function (elem, attrs) {","","                return '<input value=\"{{ knob }}\">';","","            },","            replace: true,","            scope: true,","            link: function (scope, elem, attrs) {","","                var knob = scope.$eval(attrs.knobData);","                var $elem = angular.element(elem);","","                var renderKnob = function () {","                    knob = scope.$eval(attrs.knobData);","","                    var opts = {};","                    if (!angular.isUndefined(attrs.knobOptions)) {","                        opts = scope.$eval(attrs.knobOptions);","                    }","","                    if (!angular.isUndefined(attrs.knobMax)) {","                        var max = scope.$eval(attrs.knobMax);","                        if (!angular.isUndefined(max)) {","","                            opts.max = max;","","                        }","                    }","                    angular.element(elem).knob(opts);","                };","","                var updateMax = function updateMax() {","                    var max = scope.$eval(attrs.knobMax);","                    var val = scope.$eval(attrs.knobData);","                    $elem.trigger('configure', {","                        'max': parseInt(max, 10)","                    }).trigger('change');","                    $elem.val(val).change();","                };","","                scope.$watch(attrs.knobData, function () {","                    knob = scope.$eval(attrs.knobData);","                    $elem.val(knob).change();","                });","","                scope.$watch(attrs.knobMax, function () {","                    updateMax();","                });","","                scope.$watch(attrs.knobOptions, function () {","                    elem.trigger('configure', scope.$eval(attrs.knobOptions));","                    renderKnob();","                }, true);","","            }","","        };","    });"]}]}]]},"ace":{"folds":[],"scrolltop":600,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":62,"column":7},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":36,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1413534567435,"hash":"8368167e24d66cdc2a5d1d68050e420be72afb61"}